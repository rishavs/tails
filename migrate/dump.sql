CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    slug VARCHAR(32) NOT NULL UNIQUE,
    name VARCHAR(32) NOT NULL,
    thumb VARCHAR(128),
    honorific VARCHAR(32),
    flair VARCHAR(128),
    role VARCHAR(8) NOT NULL,
    level VARCHAR(16) NOT NULL,
    stars INT DEFAULT 1,
    creds INT DEFAULT 1,
    gil INT DEFAULT 0,

    google_id VARCHAR(64) UNIQUE,
    apple_id VARCHAR(64) UNIQUE,

    warned_till TIMESTAMP,
    exiled_till TIMESTAMP,
    banned_till TIMESTAMP,
    warn_count INT DEFAULT 0,
    exiled_count INT DEFAULT 0,
    banned_count INT DEFAULT 0,

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP
);


-----------------------------------------------
CREATE extension citext;
CREATE DOMAIN EMAIL AS citext CHECK (VALUE ~* '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$');

CREATE TABLE IF NOT EXISTS USERROLES (
    ROLE TEXT NOT NULL UNIQUE
);
INSERT INTO USERROLES (ROLE) VALUES ('user'), ('mod'), ('admin');

CREATE TABLE IF NOT EXISTS USERLEVELS (
    LEVEL TEXT NOT NULL UNIQUE
);
INSERT INTO USERLEVELS (LEVEL) VALUES ('wood'), ('stone'), ('copper'), ('bronze'), ('iron'), ('steel'), ('silver'), ('gold'), ('mithril');

CREATE TABLE IF NOT EXISTS USERFLAIRS (
    FLAIR TEXT NOT NULL UNIQUE
);
INSERT INTO USERFLAIRS (FLAIR) VALUES ('none'), ('verified'), ('distinguished'), ('eminent');

CREATE TABLE IF NOT EXISTS USERS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    SLUG VARCHAR(32) NOT NULL UNIQUE,
    NAME VARCHAR(32) DEFAULT 'Nony Mouse',
    THUMB VARCHAR(128),
    HONORIFIC VARCHAR(32),
    FLAIR VARCHAR(128) DEFAULT 'none',
    USERROLE ENUM('user', 'mod', 'admin') DEFAULT 'user',
    USERLEVEL ENUM('wood', 'stone', 'copper', 'bronze', 'iron', 'steel', 'silver', 'gold') DEFAULT 'user',
    LEVELSTARS INT DEFAULT 1,
    CREDS INT DEFAULT 1,
    GIL INT DEFAULT 0,

    GOOGLEID VARCHAR(64) UNIQUE,
    APPLEID VARCHAR(64) UNIQUE,
    LAST_SESSION_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    WARNED_TILL TIMESTAMP,
    BANNED_TILL TIMESTAMP,
    WARNED_COUNT INT DEFAULT 0,
    BANNED_COUNT INT DEFAULT 0,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    DELETED_AT TIMESTAMP
);
ALTER TABLE USERS ADD CONSTRAINT USERS_NICK_LENGTH CHECK (length(NICK) BETWEEN 3 and 64);
ALTER TABLE USERS ADD CONSTRAINT USERS_THUMB_LENGTH CHECK (length(THUMB) BETWEEN 12 and 128);
ALTER TABLE USERS ADD CONSTRAINT USERS_EMAIL_LENGTH CHECK (length(EMAIL) BETWEEN 8 and 64);
ALTER TABLE USERS ADD CONSTRAINT USERS_PASSWORD_LENGTH CHECK (length(PASSWORD) BETWEEN 6 and 64);

CREATE TABLE IF NOT EXISTS SESSIONS (
    UNQID TEXT NOT NULL UNIQUE,
    USER_ID TEXT NOT NULL REFERENCES USERS(UNQID),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    LAST_USED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    EXPIRES_AT TIMESTAMP
);
ALTER TABLE SESSIONS ADD CONSTRAINT SESSIONS_ID_LENGTH CHECK (length(UNQID) BETWEEN 128 and 256);

----------------------------------------------
CREATE OR REPLACE FUNCTION create_user(IN email EMAIL, password TEXT, thumb TEXT)
RETURNS TABLE (id VARCHAR(40)) AS 
$BODY$
    insert into users (unqid, thumb, email, password) 
    values (gen_random_uuid(), thumb, email, password)
    returning unqid;
$BODY$
LANGUAGE SQL
    
    
CREATE OR REPLACE FUNCTION create_user(IN _email EMAIL, _password TEXT)
RETURNS text AS 
$$
    DECLARE
        _uuid text ;
    BEGIN
        _uuid := gen_random_uuid();
    insert into users (unqid, thumb, email, password) 
    values (_uuid, _thumb, _email, _password);
    RETURN _uuid ;
    END;
$$
    LANGUAGE plpgsql
    VOLATILE
----------------------------------------------
CREATE TABLE IF NOT EXISTS AUTH_BASIC (
    USER_ID_REF TEXT NOT NULL UNIQUE REFERENCES USERS(UNQID),
    USER_EMAIL EMAIL NOT NULL UNIQUE,
    USER_PASSWORD TEXT NOT NULL,
    VERIFIED_AT TIMESTAMP
);
ALTER TABLE AUTH_BASIC ADD CONSTRAINT USERS_EMAIL_LENGTH CHECK (length(USER_EMAIL) BETWEEN 8 and 64);
ALTER TABLE AUTH_BASIC ADD CONSTRAINT USERS_PASSWORD_LENGTH CHECK (length(USER_PASSWORD) BETWEEN 8 and 64);

-- CREATE TABLE IF NOT EXISTS AUTH_GOOGLE (
--     USER_GOOGLE_ID TEXT NOT NULL UNIQUE,
--     REFRESH_TOKEN TEXT NOT NULL,
--     REFRESHED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
-- );

-- CREATE TABLE IF NOT EXISTS AUTH_FACEBOOK (
--     USER_FACEBOOK_ID TEXT NOT NULL UNIQUE,
-- );
-- CREATE TABLE IF NOT EXISTS AUTH_GITHUB (
--     USER_GITHUB_ID TEXT NOT NULL UNIQUE,
-- );



CREATE TYPE POSTCATEGORIES AS ENUM ('offbeat','meta', 'science&nature', 'world&business' 'lifestyle', 'entertainment', 'sports');

CREATE TABLE IF NOT EXISTS POSTS (
    UNQID TEXT NOT NULL UNIQUE,
    TITLE TEXT CONSTRAINT TITLE_VALIDATE CHECK (CHAR_LENGTH(TITLE) <= 255),
    LINK TEXT,
    THUMB TEXT,
    CONTENT TEXT,
    LIKES INT DEFAULT 1,
    TAGS JSONB,
    USER_ID TEXT REFERENCES USERS(UNQID),
    USER_NICK TEXT,
    USER_FLAIR TEXT,
    IS_DELETED BOOL DEFAULT FALSE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    DELETED_AT TIMESTAMP
);

CREATE TABLE IF NOT EXISTS ALLOWED_TAGS (
    UNQID TEXT NOT NULL UNIQUE,
    NAME TEXT NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    DELETED_AT TIMESTAMP
);

CREATE TABLE IF NOT EXISTS COMMENTS(
    UNQID TEXT PRIMARY KEY,
    POST_ID TEXT,
    PARENT_ID TEXT,
    CONTENT TEXT,
    LIKES INT DEFAULT 1,
    USER_ID TEXT NOT NULL,
    USER_NICK TEXT,
    USER_FLAIR TEXT,
    IS_DELETED BOOL DEFAULT FALSE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    DELETED_AT TIMESTAMP
);

CREATE TYPE VOTETYPE AS ENUM ('up','none','down');

CREATE TABLE IF NOT EXISTS TAGS (
    NAME TEXT NOT NULL,
    POST_ID TEXT NOT NULL,
    USER_ID TEXT NOT NULL,
    VOTED VOTETYPE NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    DELETED_AT TIMESTAMP
);


CREATE TABLE IF NOT EXISTS LIKE_POSTS (
    POST_ID TEXT NOT NULL,
    USER_ID TEXT NOT NULL,
    VOTED BOOL NOT NULL DEFAULT TRUE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    DELETED_AT TIMESTAMP,
    CONSTRAINT "unique_user_and_post_combo" PRIMARY KEY (POST_ID, USER_ID)
);

CREATE TABLE IF NOT EXISTS LIKE_COMMENTS (
    POST_ID TEXT NOT NULL,
    COMMENT_ID TEXT NOT NULL,
    USER_ID TEXT NOT NULL,
    VOTED BOOL NOT NULL DEFAULT TRUE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    DELETED_AT TIMESTAMP,
    CONSTRAINT "unique_user_and_comment_combo" PRIMARY KEY (COMMENT_ID, USER_ID)
);

CREATE TABLE IF NOT EXISTS REPORT_POSTS (
    POST_ID TEXT NOT NULL,
    USER_ID TEXT NOT NULL,
    REASON TEXT NOT NULL,
    DETAILS TEXT NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    DELETED_AT TIMESTAMP,
    CONSTRAINT "unique_user_and_post_combo_for_reports" PRIMARY KEY (POST_ID, USER_ID)
);

CREATE TABLE IF NOT EXISTS REPORT_COMMENTS (
    COMMENT_ID TEXT NOT NULL,
    USER_ID TEXT NOT NULL,
    REASON TEXT NOT NULL,
    DETAILS TEXT NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    DELETED_AT TIMESTAMP,
    CONSTRAINT "unique_user_and_comment_combo_for_reports" PRIMARY KEY (COMMENT_ID, USER_ID)
);

-- CREATE TABLE IF NOT EXISTS FLAG_POSTS (
--     POST_ID TEXT NOT NULL,
--     COMMENT_ID TEXT NOT NULL,
--     USER_ID TEXT NOT NULL,
--     CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     DELETED_AT TIMESTAMP
-- );
-- CREATE TABLE IF NOT EXISTS FLAG_COMMENTS (
--     POST_ID TEXT NOT NULL,
--     COMMENT_ID TEXT NOT NULL,
--     USER_ID TEXT NOT NULL,
--     CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     DELETED_AT TIMESTAMP
-- );

-- CREATE TABLE IF NOT EXISTS POSTS (
--     UNQID TEXT NOT NULL UNIQUE,
--     TITLE TEXT NOT NULL,
--     LINK TEXT,
--     THUMB TEXT,
--     CONTENT TEXT,
--     LIKED_COUNT INT DEFAULT 1,
--     TAGS JSONB,
--     COMMENTS JSONB,
--     USER_ID TEXT NOT NULL,
--     USER_NICK TEXT,
--     USER_FLAIR TEXT DEFAULT 'Silly Goose',
--     IS_DELETED BOOL DEFAULT FALSE,
--     CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     DELETED_AT TIMESTAMP
-- );